#!/bin/bash --norc
#
# Generate a boilerplate C++ file to stdout
# if it's a header, include the #ifndef
#

usage() {
cat <<EOF

Usage: `basename $0` header-filename

EOF
  exit 1
}

# Parse positional arguments
if [ $# -ne 1 ]; then
  usage
fi

filename="$1"

if [ "${filename#/}" = "$filename" ]; then
  # File name is a relative path. Get the absolute file path so that you can
  # run "genc foo/bar.h" instead of "genc /home/me/src/yr/foo/bar.h".
  filename="$PWD/$filename"
fi

if [ "${filename%.h}" != "$filename" ]; then
  ## .h file ##################################################################
  `dirname $0`/gboilerplate

  headertag=`echo "$filename" | perl -ne 'print if s#.*/(.*)websearch/#$2#' | tr '[a-z][:punct:]' '[A-Z]_'`

  if [ -n "$headertag" ]; then
    cat <<EOF

#ifndef ${headertag}_
#define ${headertag}_

#endif  // ${headertag}_
EOF
  fi
elif [ "${filename%.cc}" != "$filename" ]; then
  ## .cc file #################################################################
  `dirname $0`/gboilerplate

  headerfile="${filename%.cc}.h"

  if [ "${headerfile#/}" = "$headerfile" ]; then
    # Header file name is a relative path. Need the absolute file path for the
    # include statement.
    headerfile="$PWD/$headerfile"
  fi

  if [ -f "$headerfile" ]; then
    # The header file exists. Try to derive the include statement.
    includefile=`echo "$headerfile" | perl -ne 'print if s#.*/(.*)websearch/#$2#'`
    if [ -n "$includefile" ]; then
      echo
      echo "#include \"$includefile\""
    fi
  fi
else
  ## Unknown file extension ###################################################
  echo "$filename doesn't end with .h or .cc"
  exit 1
fi
