/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef StructData_TYPES_H
#define StructData_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





typedef struct _StructureKV__isset {
  _StructureKV__isset() : key(false), value(false) {}
  bool key;
  bool value;
} _StructureKV__isset;

class StructureKV {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  StructureKV() : key(0), value("") {
  }

  virtual ~StructureKV() throw() {}

  int32_t key;
  std::string value;

  _StructureKV__isset __isset;

  void __set_key(const int32_t val) {
    key = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  bool operator == (const StructureKV & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const StructureKV &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StructureKV & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StructureData__isset {
  _StructureData__isset() : version(false), type(false), all(false) {}
  bool version;
  bool type;
  bool all;
} _StructureData__isset;

class StructureData {
 public:

  static const char* ascii_fingerprint; // = "44F16ADD6A1C055DB60FC94E7CDDA538";
  static const uint8_t binary_fingerprint[16]; // = {0x44,0xF1,0x6A,0xDD,0x6A,0x1C,0x05,0x5D,0xB6,0x0F,0xC9,0x4E,0x7C,0xDD,0xA5,0x38};

  StructureData() : version(0), type(0) {
  }

  virtual ~StructureData() throw() {}

  int32_t version;
  int32_t type;
  std::vector<StructureKV>  all;

  _StructureData__isset __isset;

  void __set_version(const int32_t val) {
    version = val;
  }

  void __set_type(const int32_t val) {
    type = val;
  }

  void __set_all(const std::vector<StructureKV> & val) {
    all = val;
  }

  bool operator == (const StructureData & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(all == rhs.all))
      return false;
    return true;
  }
  bool operator != (const StructureData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StructureData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
